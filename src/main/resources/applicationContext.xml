<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <description>Spring公共配置</description>

    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.isesol">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <!-- 扫描注解包路径，多个包用逗号分隔，不填pacakge表示扫描当前ApplicationContext中所有的类 -->
    <dubbo:annotation package="com.isesol"/>
    <!-- 定时任务-->
    <task:annotation-driven scheduler="myScheduler"/>
    <task:scheduler id="myScheduler" pool-size="5"/>

    <bean id="restServiceConfiguration" class="com.isesol.api.rest.cgi.config.RestServiceDefaultConfigurationImpl">
        <property name="cgiServiceName" value="wis-manage"/>
        <property name="authInterceptor" ref="localAuthInterceptor"/>
        <property name="environment" value="${api.env}"/>
        <property name="registerResourcesToDb" value="${api.resource.register.db}"/>
        <property name="repeatResourceHandleMode" value="${api.resource.repeat.handle.mode}"/>
        <property name="initServiceMappingLazy" value="${api.service.init.lazy}"/>
        <property name="autoSyncToCache" value="${api.resource.sync.cache}"/>
        <property name="invokeBusinessErrorAlarmMailTo" value="${api.alarm.error.mail}"/>
        <property name="invokeBusinessErrorAlarmSmsTo" value="${api.alarmproduction.error.sms}"/>
        <property name="invokeBusinessTimeoutAlarmMailTo" value="${api.alarm.timeout.mail}"/>
        <property name="invokeBusinessTimeoutAlarmSmsTo" value="${api.alarm.timeout.sms}"/>
    </bean>

    <bean id="localAuthInterceptor" class="com.isesol.wis.operation.interceptor.WisLocalAuthInterceptor"/>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${jedis.host}"/>
        <property name="port" value="${jedis.port}"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven proxy-target-class="true"/>

    <!-- JSR303 Validator定义 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <context:property-placeholder ignore-unresolvable="true" ignore-resource-not-found="true"
                                  location="classpath*:/application.properties,${env.application.file}"/>

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="dataSourceLogEnabled" value="false" />
        <property name="connectionLogEnabled" value="false" />

        <property name="resultSetLogEnabled" value="false" />
        <property name="statementExecutableSqlLogEnable" value="true" />
        <property name="statementLogEnabled" value="false" />
    </bean>

    <!-- Redis 资源池配置  -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.jedisPoolConfig.maxIdle}"/>
        <property name="maxTotal" value="${redis.jedisPoolConfig.maxTotal}"/>
        <property name="testOnBorrow" value="${redis.jedisPoolConfig.testOnBorrow}"/>
    </bean>

    <!-- Redis 服务器配置  -->
    <bean id="jedis.shardInfoCache1" class="redis.clients.jedis.JedisShardInfo">
        <constructor-arg index="0" value="${jedis.host}"/>
        <constructor-arg index="1" type="int" value="${jedis.port}"/>
    </bean>

    <!-- Redis 资源池  -->
    <bean id="shardedJedisPoolCache" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1">
            <list>
                <ref bean="jedis.shardInfoCache1"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- 配置sqlSessionFactory: spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations">
            <array>
                <value>classpath:com/isesol/wis/operation/mapper/*.xml</value>
            </array>
        </property>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.isesol.wis.operation.mapper,com.isesol.wis.sequence.mapper,com.isesol.wis.authority.manage.mapper" />
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.special.InsertListMapper
            </value>
        </property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <dubbo:application name="dubbo-wis-management-consumer" />

    <!-- 使用zookeeper注册中心暴露服务地址 -->
    <dubbo:registry address="${dubbo.zookeeperAddress}" />

    <beans profile="dev">
        <!-- 数据源配置, 使用Tomcat JDBC连接池 -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <!-- Connection Info -->
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
            <!-- 开启监控 -->
            <property name="filters" value="stat"/>
            <property name="maxActive" value="${jdbc.pool.maxActive}"/>
            <property name="initialSize" value="${jdbc.pool.initialSize}"/>
            <property name="maxWait" value="${jdbc.pool.maxWait}"/>
            <property name="minIdle" value="${jdbc.pool.minIdle}"/>
            <!-- 连接Idle半个小时后超时，每15分钟检查一次 -->
            <property name="timeBetweenEvictionRunsMillis" value="900000"/>
            <property name="minEvictableIdleTimeMillis" value="1800000"/>
            <property name="validationQuery" value="SELECT user()"/>
            <property name="testWhileIdle" value="true"/>
            <property name="testOnBorrow" value="false"/>
            <property name="testOnReturn" value="false"/>
            <property name="poolPreparedStatements" value="true"/>
            <property name="maxOpenPreparedStatements" value="200"/>
            <property name="proxyFilters">
                <list>
                    <ref bean="log-filter"/>
                </list>
            </property>
            <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
            <property name="removeAbandonedTimeout" value="10" />
            <property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
        </bean>
    </beans>

    <beans profile="test,production">
        <!-- 数据源配置, 使用Tomcat JDBC连接池 -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <!-- Connection Info -->
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
            <!-- 开启监控 -->
            <property name="filters" value="stat"/>
            <property name="maxActive" value="${jdbc.pool.maxActive}"/>
            <property name="initialSize" value="${jdbc.pool.initialSize}"/>
            <property name="maxWait" value="${jdbc.pool.maxWait}"/>
            <property name="minIdle" value="${jdbc.pool.minIdle}"/>
            <!-- 连接Idle半个小时后超时，每15分钟检查一次 -->
            <property name="timeBetweenEvictionRunsMillis" value="900000"/>
            <property name="minEvictableIdleTimeMillis" value="1800000"/>
            <property name="validationQuery" value="SELECT user()"/>
            <property name="testWhileIdle" value="true"/>
            <property name="testOnBorrow" value="false"/>
            <property name="testOnReturn" value="false"/>
            <property name="poolPreparedStatements" value="true"/>
            <property name="maxOpenPreparedStatements" value="200"/>
        </bean>
    </beans>
</beans>
